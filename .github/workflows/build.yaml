name: Build Flask APP

on:
  push:
    branches: ["main", "dev"]

env:
  IMAGE_NAME: flask-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # 권한을 Job 스코프로 제한
    permissions:
      id-token: write   # OIDC 토큰 발급 허용
      contents: read    # 리포 콘텐츠 읽기 (일반적으로 필요)
    # 같은 브랜치에서 중복 실행 시 이전 잡 자동 취소
    concurrency:
      group: build-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_IAM_ROLE }}
          role-session-name: actions_study01-${{ github.ref_name }}-${{ github.run_id }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/devops/study-01
          tags: |
            type=raw,value=${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'dev' && 'dev' || github.ref_name }}
            type=sha,format=short

      # 멀티아키텍처 빌드(예: amd64 + arm64)를 원할 때 QEMU 에뮬레이션 활성화 용도
      - name: Set up QEMU (optional, multi-arch 시)
        uses: docker/setup-qemu-action@v3

      # BuildKit 기반 buildx 빌더를 생성/활성화
      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true               # 생성한 빌더를 기본 빌더로 등록 -> build-push-action이 자동 사용
          driver: docker-container    # 캐시 export/import(예: type=gha) 지원 드라이버
                                      # 기본 docker 드라이버는 cache-to 같은 캐시 백엔드를 지원하지 않음

      - name: Build & Push (with cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha,mode=max # type=gha : Github Action(gha) 캐시 스토리지로 Dockerfile 레이어들을 업로드
          cache-from: type=gha        # mode=max : 캐시 Export 시 어떤 레이어를 저장할지 설정 (max는 최대한 저장해서 캐시 히트율 높음)