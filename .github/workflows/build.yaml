name: Build Flask APP

on:
  push:
    branches: ["main", "dev"]
  workflow_dispatch:  #

env:
  IMAGE_NAME: flask-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # 권한을 Job 스코프로 제한
    permissions:
      id-token: write   # OIDC 토큰 발급 허용
      contents: read    # 리포 콘텐츠 읽기 (일반적으로 필요)
    # 같은 브랜치에서 중복 실행 시 이전 잡 자동 취소
    concurrency:
      group: build-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_IAM_ROLE }}
          role-session-name: actions_study01-${{ github.ref_name }}-${{ github.run_id }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # - name: Set IMAGE_TAG
      #   run: |
      #     REF="${{ github.ref_name }}"
      #     if [[ $REF == "main" ]]; then
      #       TAG="prod"
      #     elif [[ $REF == "dev" ]]; then
      #       TAG="dev"
      #     else
      #       TAG="$REF"
      #     fi
      #     echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/devops/study-01
          tags: |
            type=raw,value=${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'dev' && 'dev' || github.ref_name }}
            type=sha,format=short

      # - name: Build & Push to ECR
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REPOSITORY: devops/study-01
      #   run: |
      #     docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      #     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Set up QEMU (optional, multi-arch 시)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true               # 생성한 빌더를 기본 빌더로 등록
          driver: docker-container    # 캐시 export 지원 드라이버

      - name: Build & Push (with cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max